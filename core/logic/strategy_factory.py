# وارد کردن کلاس‌های استراتژی مورد نیاز
from logic.compare_all_moves_strategy import CompareAllMovesSimple
from logic.strategies import MoveFurthestBackStrategy, HumanStrategy, MoveRandomPiece
# ======================================================================================================================
class StrategyFactory:
    # =========================================================================
    # متد ساخت استراتژی بر اساس نام استراتژی (به عنوان رشته)
    # =========================================================================
    @staticmethod
    def create_by_name(strategy_name):
        # برای هر استراتژی موجود، بررسی می‌کنیم آیا نام کلاس مطابق نام ورودی است یا خیر
        for strategy in StrategyFactory.get_all():
            if strategy.__name__ == strategy_name:
                return strategy()  # نمونه‌ی کلاس را برمی‌گردانیم

        # اگر هیچ استراتژی با نام مورد نظر پیدا نشد، خطا صادر می‌کنیم
        raise Exception("نمیتوان استراتژی %s را پیدا کرد" % strategy_name)

    # =========================================================================
    # متد بازگرداندن همه‌ی استراتژی‌های موجود به صورت لیست
    # =========================================================================
    @staticmethod
    def get_all():
        # لیست کلاس‌های استراتژی موجود
        strategies = [
            MoveRandomPiece,           # استراتژی حرکت تصادفی مهره‌ها
            MoveFurthestBackStrategy,  # استراتژی حرکت مهره‌ای که عقب‌ترین است
            CompareAllMovesSimple,     # استراتژی ساده بررسی همه حرکات
            HumanStrategy,             # استراتژی برای بازیکن انسانی
        ]
        return strategies  # بازگرداندن لیست استراتژی‌ها
# ======================================================================================================================